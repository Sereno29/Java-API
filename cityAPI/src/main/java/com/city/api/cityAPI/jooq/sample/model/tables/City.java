/*
 * This file is generated by jOOQ.
 */
package com.city.api.cityAPI.jooq.sample.model.tables;


import com.city.api.cityAPI.jooq.sample.model.Keys;
import com.city.api.cityAPI.jooq.sample.model.tables.records.CityRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row9;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class City extends TableImpl<CityRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>city.city</code>
     */
    public static final City CITY_ = new City();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CityRecord> getRecordType() {
        return CityRecord.class;
    }

    /**
     * The column <code>city.city.ibge_id</code>.
     */
    public final TableField<CityRecord, Long> IBGE_ID = createField(DSL.name("ibge_id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>city.city.uf</code>.
     */
    public final TableField<CityRecord, String> UF = createField(DSL.name("uf"), SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>city.city.name</code>.
     */
    public final TableField<CityRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>city.city.is_capital</code>.
     */
    public final TableField<CityRecord, Boolean> IS_CAPITAL = createField(DSL.name("is_capital"), SQLDataType.BOOLEAN.nullable(false), this, "");

    /**
     * The column <code>city.city.longitude</code>.
     */
    public final TableField<CityRecord, Double> LONGITUDE = createField(DSL.name("longitude"), SQLDataType.DOUBLE.nullable(false), this, "");

    /**
     * The column <code>city.city.latitude</code>.
     */
    public final TableField<CityRecord, Double> LATITUDE = createField(DSL.name("latitude"), SQLDataType.DOUBLE.nullable(false), this, "");

    /**
     * The column <code>city.city.alternative_names</code>.
     */
    public final TableField<CityRecord, String> ALTERNATIVE_NAMES = createField(DSL.name("alternative_names"), SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>city.city.microregion</code>.
     */
    public final TableField<CityRecord, String> MICROREGION = createField(DSL.name("microregion"), SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>city.city.mesoregion</code>.
     */
    public final TableField<CityRecord, String> MESOREGION = createField(DSL.name("mesoregion"), SQLDataType.VARCHAR, this, "");

    private City(Name alias, Table<CityRecord> aliased) {
        this(alias, aliased, null);
    }

    private City(Name alias, Table<CityRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>city.city</code> table reference
     */
    public City(String alias) {
        this(DSL.name(alias), CITY_);
    }

    /**
     * Create an aliased <code>city.city</code> table reference
     */
    public City(Name alias) {
        this(alias, CITY_);
    }

    /**
     * Create a <code>city.city</code> table reference
     */
    public City() {
        this(DSL.name("city"), null);
    }

    public <O extends Record> City(Table<O> child, ForeignKey<O, CityRecord> key) {
        super(child, key, CITY_);
    }

    @Override
    public Schema getSchema() {
        return com.city.api.cityAPI.jooq.sample.model.City.CITY;
    }

    @Override
    public UniqueKey<CityRecord> getPrimaryKey() {
        return Keys.PRIMARY_KEY;
    }

    @Override
    public List<UniqueKey<CityRecord>> getKeys() {
        return Arrays.<UniqueKey<CityRecord>>asList(Keys.PRIMARY_KEY, Keys.UNIQUE_KEY);
    }

    @Override
    public City as(String alias) {
        return new City(DSL.name(alias), this);
    }

    @Override
    public City as(Name alias) {
        return new City(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public City rename(String name) {
        return new City(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public City rename(Name name) {
        return new City(name, null);
    }

    // -------------------------------------------------------------------------
    // Row9 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row9<Long, String, String, Boolean, Double, Double, String, String, String> fieldsRow() {
        return (Row9) super.fieldsRow();
    }
}
